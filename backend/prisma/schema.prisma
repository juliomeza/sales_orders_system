generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Status {
  id          Int      @id @default(autoincrement())
  code        Int      @unique
  name        String
  description String?
  entity      String
  created_at  DateTime @default(now())
  created_by  Int?
  modified_at DateTime @updatedAt
  modified_by Int?

  @@map("statuses")
}

model User {
  id             Int       @id @default(autoincrement())
  lookupCode     String    @unique
  email          String    @unique
  password       String
  role           String
  status         Int       @default(1)
  customerId     Int?
  created_at     DateTime  @default(now())
  created_by     Int?
  modified_at    DateTime  @updatedAt
  modified_by    Int?
  creator        User?     @relation("UserCreator", fields: [created_by], references: [id])
  created_users  User[]    @relation("UserCreator")
  customer       Customer? @relation(fields: [customerId], references: [id])
  modifier       User?     @relation("UserModifier", fields: [modified_by], references: [id])
  modified_users User[]    @relation("UserModifier")

  @@map("users")
}

model Customer {
  id          Int                 @id @default(autoincrement())
  lookupCode  String              @unique
  name        String
  address     String
  city        String
  state       String
  zipCode     String
  phone       String?
  email       String?
  status      Int                 @default(1)
  created_at  DateTime            @default(now())
  created_by  Int?
  modified_at DateTime            @updatedAt
  modified_by Int?
  accounts    Account[]
  warehouses  CustomerWarehouse[]
  orders      Order[]
  projects    Project[]
  users       User[]

  @@map("customers")
}

model CustomerWarehouse {
  id          Int       @id @default(autoincrement())
  customerId  Int
  warehouseId Int
  status      Int       @default(1)
  created_at  DateTime  @default(now())
  created_by  Int?
  modified_at DateTime  @updatedAt
  modified_by Int?
  customer    Customer  @relation(fields: [customerId], references: [id])
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])

  @@unique([customerId, warehouseId])
  @@map("customer_warehouses")
}

model Warehouse {
  id          Int                 @id @default(autoincrement())
  lookupCode  String              @unique
  name        String
  address     String
  city        String
  state       String
  zipCode     String
  phone       String?
  email       String?
  capacity    Int
  status      Int                 @default(1)
  created_at  DateTime            @default(now())
  created_by  Int?
  modified_at DateTime            @updatedAt
  modified_by Int?
  customers   CustomerWarehouse[]
  orders      Order[]

  @@map("warehouses")
}

model OrderType {
  id          Int      @id @default(autoincrement())
  lookupCode  String   @unique
  name        String
  description String?
  status      Int      @default(1)
  created_at  DateTime @default(now())
  created_by  Int?
  modified_at DateTime @updatedAt
  modified_by Int?
  orders      Order[]

  @@map("order_types")
}

model CarrierService {
  id          Int      @id @default(autoincrement())
  lookupCode  String   @unique
  name        String
  description String?
  carrierId   Int
  status      Int      @default(1)
  created_at  DateTime @default(now())
  created_by  Int?
  modified_at DateTime @updatedAt
  modified_by Int?
  carrier     Carrier  @relation(fields: [carrierId], references: [id])
  orders      Order[]

  @@map("carrier_services")
}

model Account {
  id           Int      @id @default(autoincrement())
  lookupCode   String   @unique
  name         String
  address      String
  city         String
  state        String
  zipCode      String
  phone        String?
  email        String?
  contactName  String?
  customerId   Int
  accountType  String
  status       Int      @default(1)
  created_at   DateTime @default(now())
  created_by   Int?
  modified_at  DateTime @updatedAt
  modified_by  Int?
  customer     Customer @relation(fields: [customerId], references: [id])
  ordersBillTo Order[]  @relation("BillToAccount")
  ordersShipTo Order[]  @relation("ShipToAccount")

  @@map("accounts")
}

model Order {
  id                   Int            @id @default(autoincrement())
  lookupCode           String         @unique
  orderNumber          String         @unique
  status               Int            @default(1)
  orderTypeId          Int
  customerId           Int
  shipToAccountId      Int
  billToAccountId      Int
  carrierId            Int
  carrierServiceId     Int
  warehouseId          Int?
  expectedDeliveryDate DateTime
  created_at           DateTime       @default(now())
  created_by           Int?
  modified_at          DateTime       @updatedAt
  modified_by          Int?
  items                OrderItem[]
  billToAccount        Account        @relation("BillToAccount", fields: [billToAccountId], references: [id])
  carrier              Carrier        @relation(fields: [carrierId], references: [id])
  carrierService       CarrierService @relation(fields: [carrierServiceId], references: [id])
  customer             Customer       @relation(fields: [customerId], references: [id])
  orderType            OrderType      @relation(fields: [orderTypeId], references: [id])
  shipToAccount        Account        @relation("ShipToAccount", fields: [shipToAccountId], references: [id])
  warehouse            Warehouse?     @relation(fields: [warehouseId], references: [id])

  @@map("orders")
}

model OrderItem {
  id          Int      @id @default(autoincrement())
  orderId     Int
  materialId  Int
  quantity    Int
  status      Int      @default(1)
  created_at  DateTime @default(now())
  created_by  Int?
  modified_at DateTime @updatedAt
  modified_by Int?
  material    Material @relation(fields: [materialId], references: [id])
  order       Order    @relation(fields: [orderId], references: [id])

  @@map("order_items")
}

model Material {
  id                Int         @id @default(autoincrement())
  lookupCode        String      @unique
  code              String      @unique
  description       String
  uom               String
  availableQuantity Int
  status            Int         @default(1)
  projectId         Int
  created_at        DateTime    @default(now())
  created_by        Int?
  modified_at       DateTime    @updatedAt
  modified_by       Int?
  project           Project     @relation(fields: [projectId], references: [id])
  orderItems        OrderItem[]

  @@map("materials")
}

model Project {
  id          Int        @id @default(autoincrement())
  lookupCode  String     @unique
  name        String
  description String?
  customerId  Int
  isDefault   Boolean    @default(false)
  status      Int        @default(1)
  created_at  DateTime   @default(now())
  created_by  Int?
  modified_at DateTime   @updatedAt
  modified_by Int?
  materials   Material[]
  customer    Customer   @relation(fields: [customerId], references: [id])

  @@map("projects")
}

model Carrier {
  id          Int              @id @default(autoincrement())
  lookupCode  String           @unique
  name        String
  status      Int              @default(1)
  created_at  DateTime         @default(now())
  created_by  Int?
  modified_at DateTime         @updatedAt
  modified_by Int?
  services    CarrierService[]
  orders      Order[]

  @@map("carriers")
}
